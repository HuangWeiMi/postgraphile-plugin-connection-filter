// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`prints a schema with the filter plugin and the connectionFilterRelations option 1`] = `
"type Backward implements Node {
  \\"\\"\\"Reads a single \`Filterable\` that is related to this \`Backward\`.\\"\\"\\"
  filterableByFilterableId: Filterable
  filterableId: Int
  id: Int!
  name: String!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

type BackwardCompound implements Node {
  backwardCompound1: Int!
  backwardCompound2: Int!

  \\"\\"\\"
  Reads a single \`Filterable\` that is related to this \`BackwardCompound\`.
  \\"\\"\\"
  filterableByBackwardCompound1AndBackwardCompound2: Filterable
  name: String

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"
A filter to be used against \`BackwardCompound\` object types. All fields are combined with a logical ‘and.’
\\"\\"\\"
input BackwardCompoundFilter {
  \\"\\"\\"Checks for all expressions in this list.\\"\\"\\"
  and: [BackwardCompoundFilter!]

  \\"\\"\\"Filter by the object’s \`backwardCompound1\` field.\\"\\"\\"
  backwardCompound1: IntFilter

  \\"\\"\\"Filter by the object’s \`backwardCompound2\` field.\\"\\"\\"
  backwardCompound2: IntFilter

  \\"\\"\\"
  Filter by the object’s \`filterableByBackwardCompound1AndBackwardCompound2\` field.
  \\"\\"\\"
  filterableByBackwardCompound1AndBackwardCompound2: FilterableFilter

  \\"\\"\\"Filter by the object’s \`name\` field.\\"\\"\\"
  name: StringFilter

  \\"\\"\\"Negates the expression.\\"\\"\\"
  not: BackwardCompoundFilter

  \\"\\"\\"Checks for any expressions in this list.\\"\\"\\"
  or: [BackwardCompoundFilter!]
}

\\"\\"\\"An input for mutations affecting \`BackwardCompound\`\\"\\"\\"
input BackwardCompoundInput {
  backwardCompound1: Int!
  backwardCompound2: Int!
  name: String
}

\\"\\"\\"
Represents an update to a \`BackwardCompound\`. Fields that are set will be updated.
\\"\\"\\"
input BackwardCompoundPatch {
  backwardCompound1: Int
  backwardCompound2: Int
  name: String
}

\\"\\"\\"A connection to a list of \`BackwardCompound\` values.\\"\\"\\"
type BackwardCompoundsConnection {
  \\"\\"\\"
  A list of edges which contains the \`BackwardCompound\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [BackwardCompoundsEdge!]!

  \\"\\"\\"A list of \`BackwardCompound\` objects.\\"\\"\\"
  nodes: [BackwardCompound]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"
  The count of *all* \`BackwardCompound\` you could get from the connection.
  \\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`BackwardCompound\` edge in the connection.\\"\\"\\"
type BackwardCompoundsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`BackwardCompound\` at the end of the edge.\\"\\"\\"
  node: BackwardCompound
}

\\"\\"\\"Methods to use when ordering \`BackwardCompound\`.\\"\\"\\"
enum BackwardCompoundsOrderBy {
  BACKWARD_COMPOUND_1_ASC
  BACKWARD_COMPOUND_1_DESC
  BACKWARD_COMPOUND_2_ASC
  BACKWARD_COMPOUND_2_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

\\"\\"\\"
A filter to be used against \`Backward\` object types. All fields are combined with a logical ‘and.’
\\"\\"\\"
input BackwardFilter {
  \\"\\"\\"Checks for all expressions in this list.\\"\\"\\"
  and: [BackwardFilter!]

  \\"\\"\\"Filter by the object’s \`filterableByFilterableId\` field.\\"\\"\\"
  filterableByFilterableId: FilterableFilter

  \\"\\"\\"Filter by the object’s \`filterableId\` field.\\"\\"\\"
  filterableId: IntFilter

  \\"\\"\\"Filter by the object’s \`id\` field.\\"\\"\\"
  id: IntFilter

  \\"\\"\\"Filter by the object’s \`name\` field.\\"\\"\\"
  name: StringFilter

  \\"\\"\\"Negates the expression.\\"\\"\\"
  not: BackwardFilter

  \\"\\"\\"Checks for any expressions in this list.\\"\\"\\"
  or: [BackwardFilter!]
}

\\"\\"\\"An input for mutations affecting \`Backward\`\\"\\"\\"
input BackwardInput {
  filterableId: Int
  id: Int
  name: String!
}

\\"\\"\\"
Represents an update to a \`Backward\`. Fields that are set will be updated.
\\"\\"\\"
input BackwardPatch {
  filterableId: Int
  id: Int
  name: String
}

\\"\\"\\"A connection to a list of \`Backward\` values.\\"\\"\\"
type BackwardsConnection {
  \\"\\"\\"
  A list of edges which contains the \`Backward\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [BackwardsEdge!]!

  \\"\\"\\"A list of \`Backward\` objects.\\"\\"\\"
  nodes: [Backward]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Backward\` you could get from the connection.\\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`Backward\` edge in the connection.\\"\\"\\"
type BackwardsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Backward\` at the end of the edge.\\"\\"\\"
  node: Backward
}

\\"\\"\\"Methods to use when ordering \`Backward\`.\\"\\"\\"
enum BackwardsOrderBy {
  FILTERABLE_ID_ASC
  FILTERABLE_ID_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

\\"\\"\\"
A floating point number that requires more precision than IEEE 754 binary 64
\\"\\"\\"
scalar BigFloat

\\"\\"\\"
A filter to be used against BigFloat fields. All fields are combined with a logical ‘and.’
\\"\\"\\"
input BigFloatFilter {
  \\"\\"\\"
  Not equal to the specified value, treating null like an ordinary value.
  \\"\\"\\"
  distinctFrom: BigFloat

  \\"\\"\\"Equal to the specified value.\\"\\"\\"
  equalTo: BigFloat

  \\"\\"\\"Greater than the specified value.\\"\\"\\"
  greaterThan: BigFloat

  \\"\\"\\"Greater than or equal to the specified value.\\"\\"\\"
  greaterThanOrEqualTo: BigFloat

  \\"\\"\\"Included in the specified list.\\"\\"\\"
  in: [BigFloat!]

  \\"\\"\\"
  Is null (if \`true\` is specified) or is not null (if \`false\` is specified).
  \\"\\"\\"
  isNull: Boolean

  \\"\\"\\"Less than the specified value.\\"\\"\\"
  lessThan: BigFloat

  \\"\\"\\"Less than or equal to the specified value.\\"\\"\\"
  lessThanOrEqualTo: BigFloat

  \\"\\"\\"Equal to the specified value, treating null like an ordinary value.\\"\\"\\"
  notDistinctFrom: BigFloat

  \\"\\"\\"Not equal to the specified value.\\"\\"\\"
  notEqualTo: BigFloat

  \\"\\"\\"Not included in the specified list.\\"\\"\\"
  notIn: [BigFloat!]
}

\\"\\"\\"
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
\\"\\"\\"
input BooleanFilter {
  \\"\\"\\"
  Not equal to the specified value, treating null like an ordinary value.
  \\"\\"\\"
  distinctFrom: Boolean

  \\"\\"\\"Equal to the specified value.\\"\\"\\"
  equalTo: Boolean

  \\"\\"\\"Included in the specified list.\\"\\"\\"
  in: [Boolean!]

  \\"\\"\\"
  Is null (if \`true\` is specified) or is not null (if \`false\` is specified).
  \\"\\"\\"
  isNull: Boolean

  \\"\\"\\"Equal to the specified value, treating null like an ordinary value.\\"\\"\\"
  notDistinctFrom: Boolean

  \\"\\"\\"Not equal to the specified value.\\"\\"\\"
  notEqualTo: Boolean

  \\"\\"\\"Not included in the specified list.\\"\\"\\"
  notIn: [Boolean!]
}

type Child implements Node {
  \\"\\"\\"Reads a single \`Filterable\` that is related to this \`Child\`.\\"\\"\\"
  filterableByFilterableId: Filterable
  filterableId: Int
  id: Int!
  name: String!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"
A filter to be used against \`Child\` object types. All fields are combined with a logical ‘and.’
\\"\\"\\"
input ChildFilter {
  \\"\\"\\"Checks for all expressions in this list.\\"\\"\\"
  and: [ChildFilter!]

  \\"\\"\\"Filter by the object’s \`filterableByFilterableId\` field.\\"\\"\\"
  filterableByFilterableId: FilterableFilter

  \\"\\"\\"Filter by the object’s \`filterableId\` field.\\"\\"\\"
  filterableId: IntFilter

  \\"\\"\\"Filter by the object’s \`id\` field.\\"\\"\\"
  id: IntFilter

  \\"\\"\\"Filter by the object’s \`name\` field.\\"\\"\\"
  name: StringFilter

  \\"\\"\\"Negates the expression.\\"\\"\\"
  not: ChildFilter

  \\"\\"\\"Checks for any expressions in this list.\\"\\"\\"
  or: [ChildFilter!]
}

\\"\\"\\"An input for mutations affecting \`Child\`\\"\\"\\"
input ChildInput {
  filterableId: Int
  id: Int
  name: String!
}

\\"\\"\\"
Represents an update to a \`Child\`. Fields that are set will be updated.
\\"\\"\\"
input ChildPatch {
  filterableId: Int
  id: Int
  name: String
}

\\"\\"\\"A connection to a list of \`Child\` values.\\"\\"\\"
type ChildrenConnection {
  \\"\\"\\"
  A list of edges which contains the \`Child\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [ChildrenEdge!]!

  \\"\\"\\"A list of \`Child\` objects.\\"\\"\\"
  nodes: [Child]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Child\` you could get from the connection.\\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`Child\` edge in the connection.\\"\\"\\"
type ChildrenEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Child\` at the end of the edge.\\"\\"\\"
  node: Child
}

\\"\\"\\"Methods to use when ordering \`Child\`.\\"\\"\\"
enum ChildrenOrderBy {
  FILTERABLE_ID_ASC
  FILTERABLE_ID_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

\\"\\"\\"All input for the create \`BackwardCompound\` mutation.\\"\\"\\"
input CreateBackwardCompoundInput {
  \\"\\"\\"The \`BackwardCompound\` to be created by this mutation.\\"\\"\\"
  backwardCompound: BackwardCompoundInput!

  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
}

\\"\\"\\"The output of our create \`BackwardCompound\` mutation.\\"\\"\\"
type CreateBackwardCompoundPayload {
  \\"\\"\\"The \`BackwardCompound\` that was created by this mutation.\\"\\"\\"
  backwardCompound: BackwardCompound

  \\"\\"\\"An edge for our \`BackwardCompound\`. May be used by Relay 1.\\"\\"\\"
  backwardCompoundEdge(
    \\"\\"\\"The method to use when ordering \`BackwardCompound\`.\\"\\"\\"
    orderBy: [BackwardCompoundsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BackwardCompoundsEdge

  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  Reads a single \`Filterable\` that is related to this \`BackwardCompound\`.
  \\"\\"\\"
  filterableByBackwardCompound1AndBackwardCompound2: Filterable

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"All input for the create \`Backward\` mutation.\\"\\"\\"
input CreateBackwardInput {
  \\"\\"\\"The \`Backward\` to be created by this mutation.\\"\\"\\"
  backward: BackwardInput!

  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
}

\\"\\"\\"The output of our create \`Backward\` mutation.\\"\\"\\"
type CreateBackwardPayload {
  \\"\\"\\"The \`Backward\` that was created by this mutation.\\"\\"\\"
  backward: Backward

  \\"\\"\\"An edge for our \`Backward\`. May be used by Relay 1.\\"\\"\\"
  backwardEdge(
    \\"\\"\\"The method to use when ordering \`Backward\`.\\"\\"\\"
    orderBy: [BackwardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BackwardsEdge

  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"Reads a single \`Filterable\` that is related to this \`Backward\`.\\"\\"\\"
  filterableByFilterableId: Filterable

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"All input for the create \`Child\` mutation.\\"\\"\\"
input CreateChildInput {
  \\"\\"\\"The \`Child\` to be created by this mutation.\\"\\"\\"
  child: ChildInput!

  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
}

\\"\\"\\"The output of our create \`Child\` mutation.\\"\\"\\"
type CreateChildPayload {
  \\"\\"\\"The \`Child\` that was created by this mutation.\\"\\"\\"
  child: Child

  \\"\\"\\"An edge for our \`Child\`. May be used by Relay 1.\\"\\"\\"
  childEdge(
    \\"\\"\\"The method to use when ordering \`Child\`.\\"\\"\\"
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenEdge

  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"Reads a single \`Filterable\` that is related to this \`Child\`.\\"\\"\\"
  filterableByFilterableId: Filterable

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"All input for the create \`Filterable\` mutation.\\"\\"\\"
input CreateFilterableInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`Filterable\` to be created by this mutation.\\"\\"\\"
  filterable: FilterableInput!
}

\\"\\"\\"The output of our create \`Filterable\` mutation.\\"\\"\\"
type CreateFilterablePayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`Filterable\` that was created by this mutation.\\"\\"\\"
  filterable: Filterable

  \\"\\"\\"An edge for our \`Filterable\`. May be used by Relay 1.\\"\\"\\"
  filterableEdge(
    \\"\\"\\"The method to use when ordering \`Filterable\`.\\"\\"\\"
    orderBy: [FilterablesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilterablesEdge

  \\"\\"\\"Reads a single \`Forward\` that is related to this \`Filterable\`.\\"\\"\\"
  forwardByForwardId: Forward

  \\"\\"\\"
  Reads a single \`ForwardCompound\` that is related to this \`Filterable\`.
  \\"\\"\\"
  forwardCompoundByForwardCompound1AndForwardCompound2: ForwardCompound

  \\"\\"\\"Reads a single \`Parent\` that is related to this \`Filterable\`.\\"\\"\\"
  parentByParentId: Parent

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"All input for the create \`ForwardCompound\` mutation.\\"\\"\\"
input CreateForwardCompoundInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`ForwardCompound\` to be created by this mutation.\\"\\"\\"
  forwardCompound: ForwardCompoundInput!
}

\\"\\"\\"The output of our create \`ForwardCompound\` mutation.\\"\\"\\"
type CreateForwardCompoundPayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`ForwardCompound\` that was created by this mutation.\\"\\"\\"
  forwardCompound: ForwardCompound

  \\"\\"\\"An edge for our \`ForwardCompound\`. May be used by Relay 1.\\"\\"\\"
  forwardCompoundEdge(
    \\"\\"\\"The method to use when ordering \`ForwardCompound\`.\\"\\"\\"
    orderBy: [ForwardCompoundsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ForwardCompoundsEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"All input for the create \`Forward\` mutation.\\"\\"\\"
input CreateForwardInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`Forward\` to be created by this mutation.\\"\\"\\"
  forward: ForwardInput!
}

\\"\\"\\"The output of our create \`Forward\` mutation.\\"\\"\\"
type CreateForwardPayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`Forward\` that was created by this mutation.\\"\\"\\"
  forward: Forward

  \\"\\"\\"An edge for our \`Forward\`. May be used by Relay 1.\\"\\"\\"
  forwardEdge(
    \\"\\"\\"The method to use when ordering \`Forward\`.\\"\\"\\"
    orderBy: [ForwardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ForwardsEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"All input for the create \`Parent\` mutation.\\"\\"\\"
input CreateParentInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`Parent\` to be created by this mutation.\\"\\"\\"
  parent: ParentInput!
}

\\"\\"\\"The output of our create \`Parent\` mutation.\\"\\"\\"
type CreateParentPayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`Parent\` that was created by this mutation.\\"\\"\\"
  parent: Parent

  \\"\\"\\"An edge for our \`Parent\`. May be used by Relay 1.\\"\\"\\"
  parentEdge(
    \\"\\"\\"The method to use when ordering \`Parent\`.\\"\\"\\"
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"All input for the create \`Unfilterable\` mutation.\\"\\"\\"
input CreateUnfilterableInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`Unfilterable\` to be created by this mutation.\\"\\"\\"
  unfilterable: UnfilterableInput!
}

\\"\\"\\"The output of our create \`Unfilterable\` mutation.\\"\\"\\"
type CreateUnfilterablePayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query

  \\"\\"\\"The \`Unfilterable\` that was created by this mutation.\\"\\"\\"
  unfilterable: Unfilterable

  \\"\\"\\"An edge for our \`Unfilterable\`. May be used by Relay 1.\\"\\"\\"
  unfilterableEdge(
    \\"\\"\\"The method to use when ordering \`Unfilterable\`.\\"\\"\\"
    orderBy: [UnfilterablesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UnfilterablesEdge
}

\\"\\"\\"A location in a connection that can be used for resuming pagination.\\"\\"\\"
scalar Cursor

\\"\\"\\"All input for the \`deleteBackwardByFilterableId\` mutation.\\"\\"\\"
input DeleteBackwardByFilterableIdInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  filterableId: Int!
}

\\"\\"\\"All input for the \`deleteBackwardById\` mutation.\\"\\"\\"
input DeleteBackwardByIdInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  id: Int!
}

\\"\\"\\"
All input for the \`deleteBackwardCompoundByBackwardCompound1AndBackwardCompound2\` mutation.
\\"\\"\\"
input DeleteBackwardCompoundByBackwardCompound1AndBackwardCompound2Input {
  backwardCompound1: Int!
  backwardCompound2: Int!

  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
}

\\"\\"\\"All input for the \`deleteBackwardCompound\` mutation.\\"\\"\\"
input DeleteBackwardCompoundInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`BackwardCompound\` to be deleted.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"The output of our delete \`BackwardCompound\` mutation.\\"\\"\\"
type DeleteBackwardCompoundPayload {
  \\"\\"\\"The \`BackwardCompound\` that was deleted by this mutation.\\"\\"\\"
  backwardCompound: BackwardCompound

  \\"\\"\\"An edge for our \`BackwardCompound\`. May be used by Relay 1.\\"\\"\\"
  backwardCompoundEdge(
    \\"\\"\\"The method to use when ordering \`BackwardCompound\`.\\"\\"\\"
    orderBy: [BackwardCompoundsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BackwardCompoundsEdge

  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String
  deletedBackwardCompoundId: ID

  \\"\\"\\"
  Reads a single \`Filterable\` that is related to this \`BackwardCompound\`.
  \\"\\"\\"
  filterableByBackwardCompound1AndBackwardCompound2: Filterable

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"All input for the \`deleteBackward\` mutation.\\"\\"\\"
input DeleteBackwardInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`Backward\` to be deleted.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"The output of our delete \`Backward\` mutation.\\"\\"\\"
type DeleteBackwardPayload {
  \\"\\"\\"The \`Backward\` that was deleted by this mutation.\\"\\"\\"
  backward: Backward

  \\"\\"\\"An edge for our \`Backward\`. May be used by Relay 1.\\"\\"\\"
  backwardEdge(
    \\"\\"\\"The method to use when ordering \`Backward\`.\\"\\"\\"
    orderBy: [BackwardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BackwardsEdge

  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String
  deletedBackwardId: ID

  \\"\\"\\"Reads a single \`Filterable\` that is related to this \`Backward\`.\\"\\"\\"
  filterableByFilterableId: Filterable

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"All input for the \`deleteChildById\` mutation.\\"\\"\\"
input DeleteChildByIdInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  id: Int!
}

\\"\\"\\"All input for the \`deleteChild\` mutation.\\"\\"\\"
input DeleteChildInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`Child\` to be deleted.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"The output of our delete \`Child\` mutation.\\"\\"\\"
type DeleteChildPayload {
  \\"\\"\\"The \`Child\` that was deleted by this mutation.\\"\\"\\"
  child: Child

  \\"\\"\\"An edge for our \`Child\`. May be used by Relay 1.\\"\\"\\"
  childEdge(
    \\"\\"\\"The method to use when ordering \`Child\`.\\"\\"\\"
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenEdge

  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String
  deletedChildId: ID

  \\"\\"\\"Reads a single \`Filterable\` that is related to this \`Child\`.\\"\\"\\"
  filterableByFilterableId: Filterable

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"
All input for the \`deleteFilterableByBackwardCompound1AndBackwardCompound2\` mutation.
\\"\\"\\"
input DeleteFilterableByBackwardCompound1AndBackwardCompound2Input {
  backwardCompound1: Int!
  backwardCompound2: Int!

  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
}

\\"\\"\\"All input for the \`deleteFilterableByForwardId\` mutation.\\"\\"\\"
input DeleteFilterableByForwardIdInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  forwardId: Int!
}

\\"\\"\\"All input for the \`deleteFilterableById\` mutation.\\"\\"\\"
input DeleteFilterableByIdInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  id: Int!
}

\\"\\"\\"All input for the \`deleteFilterable\` mutation.\\"\\"\\"
input DeleteFilterableInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`Filterable\` to be deleted.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"The output of our delete \`Filterable\` mutation.\\"\\"\\"
type DeleteFilterablePayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String
  deletedFilterableId: ID

  \\"\\"\\"The \`Filterable\` that was deleted by this mutation.\\"\\"\\"
  filterable: Filterable

  \\"\\"\\"An edge for our \`Filterable\`. May be used by Relay 1.\\"\\"\\"
  filterableEdge(
    \\"\\"\\"The method to use when ordering \`Filterable\`.\\"\\"\\"
    orderBy: [FilterablesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilterablesEdge

  \\"\\"\\"Reads a single \`Forward\` that is related to this \`Filterable\`.\\"\\"\\"
  forwardByForwardId: Forward

  \\"\\"\\"
  Reads a single \`ForwardCompound\` that is related to this \`Filterable\`.
  \\"\\"\\"
  forwardCompoundByForwardCompound1AndForwardCompound2: ForwardCompound

  \\"\\"\\"Reads a single \`Parent\` that is related to this \`Filterable\`.\\"\\"\\"
  parentByParentId: Parent

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"All input for the \`deleteForwardById\` mutation.\\"\\"\\"
input DeleteForwardByIdInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  id: Int!
}

\\"\\"\\"
All input for the \`deleteForwardCompoundByForwardCompound1AndForwardCompound2\` mutation.
\\"\\"\\"
input DeleteForwardCompoundByForwardCompound1AndForwardCompound2Input {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  forwardCompound1: Int!
  forwardCompound2: Int!
}

\\"\\"\\"All input for the \`deleteForwardCompound\` mutation.\\"\\"\\"
input DeleteForwardCompoundInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`ForwardCompound\` to be deleted.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"The output of our delete \`ForwardCompound\` mutation.\\"\\"\\"
type DeleteForwardCompoundPayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String
  deletedForwardCompoundId: ID

  \\"\\"\\"The \`ForwardCompound\` that was deleted by this mutation.\\"\\"\\"
  forwardCompound: ForwardCompound

  \\"\\"\\"An edge for our \`ForwardCompound\`. May be used by Relay 1.\\"\\"\\"
  forwardCompoundEdge(
    \\"\\"\\"The method to use when ordering \`ForwardCompound\`.\\"\\"\\"
    orderBy: [ForwardCompoundsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ForwardCompoundsEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"All input for the \`deleteForward\` mutation.\\"\\"\\"
input DeleteForwardInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`Forward\` to be deleted.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"The output of our delete \`Forward\` mutation.\\"\\"\\"
type DeleteForwardPayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String
  deletedForwardId: ID

  \\"\\"\\"The \`Forward\` that was deleted by this mutation.\\"\\"\\"
  forward: Forward

  \\"\\"\\"An edge for our \`Forward\`. May be used by Relay 1.\\"\\"\\"
  forwardEdge(
    \\"\\"\\"The method to use when ordering \`Forward\`.\\"\\"\\"
    orderBy: [ForwardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ForwardsEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"All input for the \`deleteParentById\` mutation.\\"\\"\\"
input DeleteParentByIdInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  id: Int!
}

\\"\\"\\"All input for the \`deleteParent\` mutation.\\"\\"\\"
input DeleteParentInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`Parent\` to be deleted.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"The output of our delete \`Parent\` mutation.\\"\\"\\"
type DeleteParentPayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String
  deletedParentId: ID

  \\"\\"\\"The \`Parent\` that was deleted by this mutation.\\"\\"\\"
  parent: Parent

  \\"\\"\\"An edge for our \`Parent\`. May be used by Relay 1.\\"\\"\\"
  parentEdge(
    \\"\\"\\"The method to use when ordering \`Parent\`.\\"\\"\\"
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"All input for the \`deleteUnfilterableById\` mutation.\\"\\"\\"
input DeleteUnfilterableByIdInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  id: Int!
}

\\"\\"\\"All input for the \`deleteUnfilterable\` mutation.\\"\\"\\"
input DeleteUnfilterableInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`Unfilterable\` to be deleted.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"The output of our delete \`Unfilterable\` mutation.\\"\\"\\"
type DeleteUnfilterablePayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String
  deletedUnfilterableId: ID

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query

  \\"\\"\\"The \`Unfilterable\` that was deleted by this mutation.\\"\\"\\"
  unfilterable: Unfilterable

  \\"\\"\\"An edge for our \`Unfilterable\`. May be used by Relay 1.\\"\\"\\"
  unfilterableEdge(
    \\"\\"\\"The method to use when ordering \`Unfilterable\`.\\"\\"\\"
    orderBy: [UnfilterablesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UnfilterablesEdge
}

type Filterable implements Node {
  \\"\\"\\"Reads a single \`Backward\` that is related to this \`Filterable\`.\\"\\"\\"
  backwardByFilterableId: Backward
  backwardCompound1: Int
  backwardCompound2: Int

  \\"\\"\\"
  Reads a single \`BackwardCompound\` that is related to this \`Filterable\`.
  \\"\\"\\"
  backwardCompoundByBackwardCompound1AndBackwardCompound2: BackwardCompound

  \\"\\"\\"Reads and enables pagination through a set of \`BackwardCompound\`.\\"\\"\\"
  backwardCompoundsByBackwardCompound1AndBackwardCompound2(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A filter to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    filter: BackwardCompoundFilter

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`BackwardCompound\`.\\"\\"\\"
    orderBy: [BackwardCompoundsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BackwardCompoundsConnection! @deprecated(reason: \\"Please use backwardCompoundByBackwardCompound1AndBackwardCompound2 instead\\")

  \\"\\"\\"Reads and enables pagination through a set of \`Backward\`.\\"\\"\\"
  backwardsByFilterableId(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A filter to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    filter: BackwardFilter

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Backward\`.\\"\\"\\"
    orderBy: [BackwardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BackwardsConnection! @deprecated(reason: \\"Please use backwardByFilterableId instead\\")
  boolean: Boolean

  \\"\\"\\"Reads and enables pagination through a set of \`Child\`.\\"\\"\\"
  childrenByFilterableId(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A filter to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    filter: ChildFilter

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Child\`.\\"\\"\\"
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenConnection!
  computed: String
  computed2: String
  computedChild: Child
  computedIntArray: [Int]

  \\"\\"\\"Reads and enables pagination through a set of \`Child\`.\\"\\"\\"
  computedSetofChild(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A filter to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    filter: ChildFilter

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int
  ): ChildrenConnection!
  computedSetofInt(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A filter to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    filter: IntFilter

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int
  ): FilterableComputedSetofIntConnection!
  enum: Mood

  \\"\\"\\"Reads a single \`Forward\` that is related to this \`Filterable\`.\\"\\"\\"
  forwardByForwardId: Forward
  forwardCompound1: Int
  forwardCompound2: Int

  \\"\\"\\"
  Reads a single \`ForwardCompound\` that is related to this \`Filterable\`.
  \\"\\"\\"
  forwardCompoundByForwardCompound1AndForwardCompound2: ForwardCompound
  forwardId: Int
  id: Int!
  inet: InternetAddress
  int: Int
  intArray: [Int]
  jsonb: JSON

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
  numeric: BigFloat

  \\"\\"\\"Reads a single \`Parent\` that is related to this \`Filterable\`.\\"\\"\\"
  parentByParentId: Parent
  parentId: Int
  real: Float
  string: String
}

\\"\\"\\"A connection to a list of \`Int\` values.\\"\\"\\"
type FilterableComputedSetofIntConnection {
  \\"\\"\\"
  A list of edges which contains the \`Int\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [FilterableComputedSetofIntEdge!]!

  \\"\\"\\"A list of \`Int\` objects.\\"\\"\\"
  nodes: [Int]!
}

\\"\\"\\"A \`Int\` edge in the connection.\\"\\"\\"
type FilterableComputedSetofIntEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Int\` at the end of the edge.\\"\\"\\"
  node: Int
}

\\"\\"\\"
A filter to be used against \`Filterable\` object types. All fields are combined with a logical ‘and.’
\\"\\"\\"
input FilterableFilter {
  \\"\\"\\"Checks for all expressions in this list.\\"\\"\\"
  and: [FilterableFilter!]

  \\"\\"\\"Filter by the object’s \`backwardByFilterableId\` field.\\"\\"\\"
  backwardByFilterableId: BackwardFilter

  \\"\\"\\"Filter by the object’s \`backwardCompound1\` field.\\"\\"\\"
  backwardCompound1: IntFilter

  \\"\\"\\"Filter by the object’s \`backwardCompound2\` field.\\"\\"\\"
  backwardCompound2: IntFilter

  \\"\\"\\"
  Filter by the object’s \`backwardCompoundByBackwardCompound1AndBackwardCompound2\` field.
  \\"\\"\\"
  backwardCompoundByBackwardCompound1AndBackwardCompound2: BackwardCompoundFilter

  \\"\\"\\"Filter by the object’s \`boolean\` field.\\"\\"\\"
  boolean: BooleanFilter

  \\"\\"\\"Filter by the object’s \`computed\` field.\\"\\"\\"
  computed: StringFilter

  \\"\\"\\"Filter by the object’s \`computedIntArray\` field.\\"\\"\\"
  computedIntArray: IntListFilter

  \\"\\"\\"Filter by the object’s \`enum\` field.\\"\\"\\"
  enum: MoodFilter

  \\"\\"\\"Filter by the object’s \`forwardByForwardId\` field.\\"\\"\\"
  forwardByForwardId: ForwardFilter

  \\"\\"\\"Filter by the object’s \`forwardCompound1\` field.\\"\\"\\"
  forwardCompound1: IntFilter

  \\"\\"\\"Filter by the object’s \`forwardCompound2\` field.\\"\\"\\"
  forwardCompound2: IntFilter

  \\"\\"\\"
  Filter by the object’s \`forwardCompoundByForwardCompound1AndForwardCompound2\` field.
  \\"\\"\\"
  forwardCompoundByForwardCompound1AndForwardCompound2: ForwardCompoundFilter

  \\"\\"\\"Filter by the object’s \`forwardId\` field.\\"\\"\\"
  forwardId: IntFilter

  \\"\\"\\"Filter by the object’s \`id\` field.\\"\\"\\"
  id: IntFilter

  \\"\\"\\"Filter by the object’s \`inet\` field.\\"\\"\\"
  inet: InternetAddressFilter

  \\"\\"\\"Filter by the object’s \`int\` field.\\"\\"\\"
  int: IntFilter

  \\"\\"\\"Filter by the object’s \`intArray\` field.\\"\\"\\"
  intArray: IntListFilter

  \\"\\"\\"Filter by the object’s \`jsonb\` field.\\"\\"\\"
  jsonb: JSONFilter

  \\"\\"\\"Negates the expression.\\"\\"\\"
  not: FilterableFilter

  \\"\\"\\"Filter by the object’s \`numeric\` field.\\"\\"\\"
  numeric: BigFloatFilter

  \\"\\"\\"Checks for any expressions in this list.\\"\\"\\"
  or: [FilterableFilter!]

  \\"\\"\\"Filter by the object’s \`parentByParentId\` field.\\"\\"\\"
  parentByParentId: ParentFilter

  \\"\\"\\"Filter by the object’s \`parentId\` field.\\"\\"\\"
  parentId: IntFilter

  \\"\\"\\"Filter by the object’s \`string\` field.\\"\\"\\"
  string: StringFilter
}

\\"\\"\\"An input for mutations affecting \`Filterable\`\\"\\"\\"
input FilterableInput {
  backwardCompound1: Int
  backwardCompound2: Int
  boolean: Boolean
  enum: Mood
  forwardCompound1: Int
  forwardCompound2: Int
  forwardId: Int
  id: Int
  inet: InternetAddress
  int: Int
  intArray: [Int]
  jsonb: JSON
  numeric: BigFloat
  parentId: Int
  real: Float
  string: String
}

\\"\\"\\"
Represents an update to a \`Filterable\`. Fields that are set will be updated.
\\"\\"\\"
input FilterablePatch {
  backwardCompound1: Int
  backwardCompound2: Int
  boolean: Boolean
  enum: Mood
  forwardCompound1: Int
  forwardCompound2: Int
  forwardId: Int
  id: Int
  inet: InternetAddress
  int: Int
  intArray: [Int]
  jsonb: JSON
  numeric: BigFloat
  parentId: Int
  real: Float
  string: String
}

\\"\\"\\"A connection to a list of \`Filterable\` values.\\"\\"\\"
type FilterablesConnection {
  \\"\\"\\"
  A list of edges which contains the \`Filterable\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [FilterablesEdge!]!

  \\"\\"\\"A list of \`Filterable\` objects.\\"\\"\\"
  nodes: [Filterable]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Filterable\` you could get from the connection.\\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`Filterable\` edge in the connection.\\"\\"\\"
type FilterablesEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Filterable\` at the end of the edge.\\"\\"\\"
  node: Filterable
}

\\"\\"\\"Methods to use when ordering \`Filterable\`.\\"\\"\\"
enum FilterablesOrderBy {
  BACKWARD_COMPOUND_1_ASC
  BACKWARD_COMPOUND_1_DESC
  BACKWARD_COMPOUND_2_ASC
  BACKWARD_COMPOUND_2_DESC
  BOOLEAN_ASC
  BOOLEAN_DESC
  ENUM_ASC
  ENUM_DESC
  FORWARD_COMPOUND_1_ASC
  FORWARD_COMPOUND_1_DESC
  FORWARD_COMPOUND_2_ASC
  FORWARD_COMPOUND_2_DESC
  FORWARD_ID_ASC
  FORWARD_ID_DESC
  ID_ASC
  ID_DESC
  INET_ASC
  INET_DESC
  INT_ARRAY_ASC
  INT_ARRAY_DESC
  INT_ASC
  INT_DESC
  JSONB_ASC
  JSONB_DESC
  NATURAL
  NUMERIC_ASC
  NUMERIC_DESC
  PARENT_ID_ASC
  PARENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REAL_ASC
  REAL_DESC
  STRING_ASC
  STRING_DESC
}

type Forward implements Node {
  \\"\\"\\"Reads a single \`Filterable\` that is related to this \`Forward\`.\\"\\"\\"
  filterableByForwardId: Filterable

  \\"\\"\\"Reads and enables pagination through a set of \`Filterable\`.\\"\\"\\"
  filterablesByForwardId(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A filter to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    filter: FilterableFilter

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Filterable\`.\\"\\"\\"
    orderBy: [FilterablesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilterablesConnection! @deprecated(reason: \\"Please use filterableByForwardId instead\\")
  id: Int!
  name: String!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

type ForwardCompound implements Node {
  \\"\\"\\"Reads and enables pagination through a set of \`Filterable\`.\\"\\"\\"
  filterablesByForwardCompound1AndForwardCompound2(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A filter to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    filter: FilterableFilter

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Filterable\`.\\"\\"\\"
    orderBy: [FilterablesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilterablesConnection!
  forwardCompound1: Int!
  forwardCompound2: Int!
  name: String

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"
A filter to be used against \`ForwardCompound\` object types. All fields are combined with a logical ‘and.’
\\"\\"\\"
input ForwardCompoundFilter {
  \\"\\"\\"Checks for all expressions in this list.\\"\\"\\"
  and: [ForwardCompoundFilter!]

  \\"\\"\\"Filter by the object’s \`forwardCompound1\` field.\\"\\"\\"
  forwardCompound1: IntFilter

  \\"\\"\\"Filter by the object’s \`forwardCompound2\` field.\\"\\"\\"
  forwardCompound2: IntFilter

  \\"\\"\\"Filter by the object’s \`name\` field.\\"\\"\\"
  name: StringFilter

  \\"\\"\\"Negates the expression.\\"\\"\\"
  not: ForwardCompoundFilter

  \\"\\"\\"Checks for any expressions in this list.\\"\\"\\"
  or: [ForwardCompoundFilter!]
}

\\"\\"\\"An input for mutations affecting \`ForwardCompound\`\\"\\"\\"
input ForwardCompoundInput {
  forwardCompound1: Int!
  forwardCompound2: Int!
  name: String
}

\\"\\"\\"
Represents an update to a \`ForwardCompound\`. Fields that are set will be updated.
\\"\\"\\"
input ForwardCompoundPatch {
  forwardCompound1: Int
  forwardCompound2: Int
  name: String
}

\\"\\"\\"A connection to a list of \`ForwardCompound\` values.\\"\\"\\"
type ForwardCompoundsConnection {
  \\"\\"\\"
  A list of edges which contains the \`ForwardCompound\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [ForwardCompoundsEdge!]!

  \\"\\"\\"A list of \`ForwardCompound\` objects.\\"\\"\\"
  nodes: [ForwardCompound]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"
  The count of *all* \`ForwardCompound\` you could get from the connection.
  \\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`ForwardCompound\` edge in the connection.\\"\\"\\"
type ForwardCompoundsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`ForwardCompound\` at the end of the edge.\\"\\"\\"
  node: ForwardCompound
}

\\"\\"\\"Methods to use when ordering \`ForwardCompound\`.\\"\\"\\"
enum ForwardCompoundsOrderBy {
  FORWARD_COMPOUND_1_ASC
  FORWARD_COMPOUND_1_DESC
  FORWARD_COMPOUND_2_ASC
  FORWARD_COMPOUND_2_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

\\"\\"\\"
A filter to be used against \`Forward\` object types. All fields are combined with a logical ‘and.’
\\"\\"\\"
input ForwardFilter {
  \\"\\"\\"Checks for all expressions in this list.\\"\\"\\"
  and: [ForwardFilter!]

  \\"\\"\\"Filter by the object’s \`filterableByForwardId\` field.\\"\\"\\"
  filterableByForwardId: FilterableFilter

  \\"\\"\\"Filter by the object’s \`id\` field.\\"\\"\\"
  id: IntFilter

  \\"\\"\\"Filter by the object’s \`name\` field.\\"\\"\\"
  name: StringFilter

  \\"\\"\\"Negates the expression.\\"\\"\\"
  not: ForwardFilter

  \\"\\"\\"Checks for any expressions in this list.\\"\\"\\"
  or: [ForwardFilter!]
}

\\"\\"\\"An input for mutations affecting \`Forward\`\\"\\"\\"
input ForwardInput {
  id: Int
  name: String!
}

\\"\\"\\"
Represents an update to a \`Forward\`. Fields that are set will be updated.
\\"\\"\\"
input ForwardPatch {
  id: Int
  name: String
}

\\"\\"\\"A connection to a list of \`Forward\` values.\\"\\"\\"
type ForwardsConnection {
  \\"\\"\\"
  A list of edges which contains the \`Forward\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [ForwardsEdge!]!

  \\"\\"\\"A list of \`Forward\` objects.\\"\\"\\"
  nodes: [Forward]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Forward\` you could get from the connection.\\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`Forward\` edge in the connection.\\"\\"\\"
type ForwardsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Forward\` at the end of the edge.\\"\\"\\"
  node: Forward
}

\\"\\"\\"Methods to use when ordering \`Forward\`.\\"\\"\\"
enum ForwardsOrderBy {
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

\\"\\"\\"An IPv4 or IPv6 host address, and optionally its subnet.\\"\\"\\"
scalar InternetAddress

\\"\\"\\"
A filter to be used against InternetAddress fields. All fields are combined with a logical ‘and.’
\\"\\"\\"
input InternetAddressFilter {
  \\"\\"\\"
  Not equal to the specified value, treating null like an ordinary value.
  \\"\\"\\"
  distinctFrom: InternetAddress

  \\"\\"\\"Equal to the specified value.\\"\\"\\"
  equalTo: InternetAddress

  \\"\\"\\"Included in the specified list.\\"\\"\\"
  in: [InternetAddress!]

  \\"\\"\\"Contained by the specified internet address.\\"\\"\\"
  inetContainedBy: InternetAddress

  \\"\\"\\"Contained by or equal to the specified internet address.\\"\\"\\"
  inetContainedByOrEquals: InternetAddress

  \\"\\"\\"Contains the specified internet address.\\"\\"\\"
  inetContains: InternetAddress

  \\"\\"\\"Contains or is equal to the specified internet address.\\"\\"\\"
  inetContainsOrEquals: InternetAddress

  \\"\\"\\"Contains or is contained by the specified internet address.\\"\\"\\"
  inetContainsOrIsContainedBy: InternetAddress

  \\"\\"\\"
  Is null (if \`true\` is specified) or is not null (if \`false\` is specified).
  \\"\\"\\"
  isNull: Boolean

  \\"\\"\\"Equal to the specified value, treating null like an ordinary value.\\"\\"\\"
  notDistinctFrom: InternetAddress

  \\"\\"\\"Not equal to the specified value.\\"\\"\\"
  notEqualTo: InternetAddress

  \\"\\"\\"Not included in the specified list.\\"\\"\\"
  notIn: [InternetAddress!]
}

\\"\\"\\"
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
\\"\\"\\"
input IntFilter {
  \\"\\"\\"
  Not equal to the specified value, treating null like an ordinary value.
  \\"\\"\\"
  distinctFrom: Int

  \\"\\"\\"Equal to the specified value.\\"\\"\\"
  equalTo: Int

  \\"\\"\\"Greater than the specified value.\\"\\"\\"
  greaterThan: Int

  \\"\\"\\"Greater than or equal to the specified value.\\"\\"\\"
  greaterThanOrEqualTo: Int

  \\"\\"\\"Included in the specified list.\\"\\"\\"
  in: [Int!]

  \\"\\"\\"
  Is null (if \`true\` is specified) or is not null (if \`false\` is specified).
  \\"\\"\\"
  isNull: Boolean

  \\"\\"\\"Less than the specified value.\\"\\"\\"
  lessThan: Int

  \\"\\"\\"Less than or equal to the specified value.\\"\\"\\"
  lessThanOrEqualTo: Int

  \\"\\"\\"Equal to the specified value, treating null like an ordinary value.\\"\\"\\"
  notDistinctFrom: Int

  \\"\\"\\"Not equal to the specified value.\\"\\"\\"
  notEqualTo: Int

  \\"\\"\\"Not included in the specified list.\\"\\"\\"
  notIn: [Int!]
}

\\"\\"\\"
A filter to be used against Int List fields. All fields are combined with a logical ‘and.’
\\"\\"\\"
input IntListFilter {
  \\"\\"\\"Any array item is equal to the specified value.\\"\\"\\"
  anyEqualTo: Int

  \\"\\"\\"Any array item is greater than the specified value.\\"\\"\\"
  anyGreaterThan: Int

  \\"\\"\\"Any array item is greater than or equal to the specified value.\\"\\"\\"
  anyGreaterThanOrEqualTo: Int

  \\"\\"\\"Any array item is less than the specified value.\\"\\"\\"
  anyLessThan: Int

  \\"\\"\\"Any array item is less than or equal to the specified value.\\"\\"\\"
  anyLessThanOrEqualTo: Int

  \\"\\"\\"Any array item is not equal to the specified value.\\"\\"\\"
  anyNotEqualTo: Int

  \\"\\"\\"
  Not equal to the specified value, treating null like an ordinary value.
  \\"\\"\\"
  distinctFrom: [Int]

  \\"\\"\\"Equal to the specified value.\\"\\"\\"
  equalTo: [Int]

  \\"\\"\\"Greater than the specified value.\\"\\"\\"
  greaterThan: [Int]

  \\"\\"\\"Greater than or equal to the specified value.\\"\\"\\"
  greaterThanOrEqualTo: [Int]

  \\"\\"\\"
  Is null (if \`true\` is specified) or is not null (if \`false\` is specified).
  \\"\\"\\"
  isNull: Boolean

  \\"\\"\\"Less than the specified value.\\"\\"\\"
  lessThan: [Int]

  \\"\\"\\"Less than or equal to the specified value.\\"\\"\\"
  lessThanOrEqualTo: [Int]

  \\"\\"\\"Equal to the specified value, treating null like an ordinary value.\\"\\"\\"
  notDistinctFrom: [Int]

  \\"\\"\\"Not equal to the specified value.\\"\\"\\"
  notEqualTo: [Int]
}

\\"\\"\\"
A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
\\"\\"\\"
scalar JSON

\\"\\"\\"
A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
\\"\\"\\"
input JSONFilter {
  \\"\\"\\"Contained by the specified JSON.\\"\\"\\"
  containedBy: JSON

  \\"\\"\\"Contains the specified JSON.\\"\\"\\"
  contains: JSON

  \\"\\"\\"
  Not equal to the specified value, treating null like an ordinary value.
  \\"\\"\\"
  distinctFrom: JSON

  \\"\\"\\"Equal to the specified value.\\"\\"\\"
  equalTo: JSON

  \\"\\"\\"Included in the specified list.\\"\\"\\"
  in: [JSON!]

  \\"\\"\\"
  Is null (if \`true\` is specified) or is not null (if \`false\` is specified).
  \\"\\"\\"
  isNull: Boolean

  \\"\\"\\"Equal to the specified value, treating null like an ordinary value.\\"\\"\\"
  notDistinctFrom: JSON

  \\"\\"\\"Not equal to the specified value.\\"\\"\\"
  notEqualTo: JSON

  \\"\\"\\"Not included in the specified list.\\"\\"\\"
  notIn: [JSON!]
}

enum Mood {
  HAPPY
  OK
  SAD
}

\\"\\"\\"
A filter to be used against Mood fields. All fields are combined with a logical ‘and.’
\\"\\"\\"
input MoodFilter {
  \\"\\"\\"
  Not equal to the specified value, treating null like an ordinary value.
  \\"\\"\\"
  distinctFrom: Mood

  \\"\\"\\"Equal to the specified value.\\"\\"\\"
  equalTo: Mood

  \\"\\"\\"Included in the specified list.\\"\\"\\"
  in: [Mood!]

  \\"\\"\\"
  Is null (if \`true\` is specified) or is not null (if \`false\` is specified).
  \\"\\"\\"
  isNull: Boolean

  \\"\\"\\"Equal to the specified value, treating null like an ordinary value.\\"\\"\\"
  notDistinctFrom: Mood

  \\"\\"\\"Not equal to the specified value.\\"\\"\\"
  notEqualTo: Mood

  \\"\\"\\"Not included in the specified list.\\"\\"\\"
  notIn: [Mood!]
}

\\"\\"\\"
The root mutation type which contains root level fields which mutate data.
\\"\\"\\"
type Mutation {
  \\"\\"\\"Creates a single \`Backward\`.\\"\\"\\"
  createBackward(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: CreateBackwardInput!
  ): CreateBackwardPayload

  \\"\\"\\"Creates a single \`BackwardCompound\`.\\"\\"\\"
  createBackwardCompound(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: CreateBackwardCompoundInput!
  ): CreateBackwardCompoundPayload

  \\"\\"\\"Creates a single \`Child\`.\\"\\"\\"
  createChild(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: CreateChildInput!
  ): CreateChildPayload

  \\"\\"\\"Creates a single \`Filterable\`.\\"\\"\\"
  createFilterable(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: CreateFilterableInput!
  ): CreateFilterablePayload

  \\"\\"\\"Creates a single \`Forward\`.\\"\\"\\"
  createForward(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: CreateForwardInput!
  ): CreateForwardPayload

  \\"\\"\\"Creates a single \`ForwardCompound\`.\\"\\"\\"
  createForwardCompound(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: CreateForwardCompoundInput!
  ): CreateForwardCompoundPayload

  \\"\\"\\"Creates a single \`Parent\`.\\"\\"\\"
  createParent(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: CreateParentInput!
  ): CreateParentPayload

  \\"\\"\\"Creates a single \`Unfilterable\`.\\"\\"\\"
  createUnfilterable(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: CreateUnfilterableInput!
  ): CreateUnfilterablePayload

  \\"\\"\\"Deletes a single \`Backward\` using its globally unique id.\\"\\"\\"
  deleteBackward(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeleteBackwardInput!
  ): DeleteBackwardPayload

  \\"\\"\\"Deletes a single \`Backward\` using a unique key.\\"\\"\\"
  deleteBackwardByFilterableId(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeleteBackwardByFilterableIdInput!
  ): DeleteBackwardPayload

  \\"\\"\\"Deletes a single \`Backward\` using a unique key.\\"\\"\\"
  deleteBackwardById(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeleteBackwardByIdInput!
  ): DeleteBackwardPayload

  \\"\\"\\"Deletes a single \`BackwardCompound\` using its globally unique id.\\"\\"\\"
  deleteBackwardCompound(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeleteBackwardCompoundInput!
  ): DeleteBackwardCompoundPayload

  \\"\\"\\"Deletes a single \`BackwardCompound\` using a unique key.\\"\\"\\"
  deleteBackwardCompoundByBackwardCompound1AndBackwardCompound2(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeleteBackwardCompoundByBackwardCompound1AndBackwardCompound2Input!
  ): DeleteBackwardCompoundPayload

  \\"\\"\\"Deletes a single \`Child\` using its globally unique id.\\"\\"\\"
  deleteChild(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeleteChildInput!
  ): DeleteChildPayload

  \\"\\"\\"Deletes a single \`Child\` using a unique key.\\"\\"\\"
  deleteChildById(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeleteChildByIdInput!
  ): DeleteChildPayload

  \\"\\"\\"Deletes a single \`Filterable\` using its globally unique id.\\"\\"\\"
  deleteFilterable(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeleteFilterableInput!
  ): DeleteFilterablePayload

  \\"\\"\\"Deletes a single \`Filterable\` using a unique key.\\"\\"\\"
  deleteFilterableByBackwardCompound1AndBackwardCompound2(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeleteFilterableByBackwardCompound1AndBackwardCompound2Input!
  ): DeleteFilterablePayload

  \\"\\"\\"Deletes a single \`Filterable\` using a unique key.\\"\\"\\"
  deleteFilterableByForwardId(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeleteFilterableByForwardIdInput!
  ): DeleteFilterablePayload

  \\"\\"\\"Deletes a single \`Filterable\` using a unique key.\\"\\"\\"
  deleteFilterableById(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeleteFilterableByIdInput!
  ): DeleteFilterablePayload

  \\"\\"\\"Deletes a single \`Forward\` using its globally unique id.\\"\\"\\"
  deleteForward(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeleteForwardInput!
  ): DeleteForwardPayload

  \\"\\"\\"Deletes a single \`Forward\` using a unique key.\\"\\"\\"
  deleteForwardById(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeleteForwardByIdInput!
  ): DeleteForwardPayload

  \\"\\"\\"Deletes a single \`ForwardCompound\` using its globally unique id.\\"\\"\\"
  deleteForwardCompound(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeleteForwardCompoundInput!
  ): DeleteForwardCompoundPayload

  \\"\\"\\"Deletes a single \`ForwardCompound\` using a unique key.\\"\\"\\"
  deleteForwardCompoundByForwardCompound1AndForwardCompound2(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeleteForwardCompoundByForwardCompound1AndForwardCompound2Input!
  ): DeleteForwardCompoundPayload

  \\"\\"\\"Deletes a single \`Parent\` using its globally unique id.\\"\\"\\"
  deleteParent(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeleteParentInput!
  ): DeleteParentPayload

  \\"\\"\\"Deletes a single \`Parent\` using a unique key.\\"\\"\\"
  deleteParentById(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeleteParentByIdInput!
  ): DeleteParentPayload

  \\"\\"\\"Deletes a single \`Unfilterable\` using its globally unique id.\\"\\"\\"
  deleteUnfilterable(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeleteUnfilterableInput!
  ): DeleteUnfilterablePayload

  \\"\\"\\"Deletes a single \`Unfilterable\` using a unique key.\\"\\"\\"
  deleteUnfilterableById(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeleteUnfilterableByIdInput!
  ): DeleteUnfilterablePayload

  \\"\\"\\"Updates a single \`Backward\` using its globally unique id and a patch.\\"\\"\\"
  updateBackward(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdateBackwardInput!
  ): UpdateBackwardPayload

  \\"\\"\\"Updates a single \`Backward\` using a unique key and a patch.\\"\\"\\"
  updateBackwardByFilterableId(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdateBackwardByFilterableIdInput!
  ): UpdateBackwardPayload

  \\"\\"\\"Updates a single \`Backward\` using a unique key and a patch.\\"\\"\\"
  updateBackwardById(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdateBackwardByIdInput!
  ): UpdateBackwardPayload

  \\"\\"\\"
  Updates a single \`BackwardCompound\` using its globally unique id and a patch.
  \\"\\"\\"
  updateBackwardCompound(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdateBackwardCompoundInput!
  ): UpdateBackwardCompoundPayload

  \\"\\"\\"Updates a single \`BackwardCompound\` using a unique key and a patch.\\"\\"\\"
  updateBackwardCompoundByBackwardCompound1AndBackwardCompound2(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdateBackwardCompoundByBackwardCompound1AndBackwardCompound2Input!
  ): UpdateBackwardCompoundPayload

  \\"\\"\\"Updates a single \`Child\` using its globally unique id and a patch.\\"\\"\\"
  updateChild(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdateChildInput!
  ): UpdateChildPayload

  \\"\\"\\"Updates a single \`Child\` using a unique key and a patch.\\"\\"\\"
  updateChildById(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdateChildByIdInput!
  ): UpdateChildPayload

  \\"\\"\\"
  Updates a single \`Filterable\` using its globally unique id and a patch.
  \\"\\"\\"
  updateFilterable(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdateFilterableInput!
  ): UpdateFilterablePayload

  \\"\\"\\"Updates a single \`Filterable\` using a unique key and a patch.\\"\\"\\"
  updateFilterableByBackwardCompound1AndBackwardCompound2(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdateFilterableByBackwardCompound1AndBackwardCompound2Input!
  ): UpdateFilterablePayload

  \\"\\"\\"Updates a single \`Filterable\` using a unique key and a patch.\\"\\"\\"
  updateFilterableByForwardId(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdateFilterableByForwardIdInput!
  ): UpdateFilterablePayload

  \\"\\"\\"Updates a single \`Filterable\` using a unique key and a patch.\\"\\"\\"
  updateFilterableById(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdateFilterableByIdInput!
  ): UpdateFilterablePayload

  \\"\\"\\"Updates a single \`Forward\` using its globally unique id and a patch.\\"\\"\\"
  updateForward(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdateForwardInput!
  ): UpdateForwardPayload

  \\"\\"\\"Updates a single \`Forward\` using a unique key and a patch.\\"\\"\\"
  updateForwardById(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdateForwardByIdInput!
  ): UpdateForwardPayload

  \\"\\"\\"
  Updates a single \`ForwardCompound\` using its globally unique id and a patch.
  \\"\\"\\"
  updateForwardCompound(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdateForwardCompoundInput!
  ): UpdateForwardCompoundPayload

  \\"\\"\\"Updates a single \`ForwardCompound\` using a unique key and a patch.\\"\\"\\"
  updateForwardCompoundByForwardCompound1AndForwardCompound2(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdateForwardCompoundByForwardCompound1AndForwardCompound2Input!
  ): UpdateForwardCompoundPayload

  \\"\\"\\"Updates a single \`Parent\` using its globally unique id and a patch.\\"\\"\\"
  updateParent(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdateParentInput!
  ): UpdateParentPayload

  \\"\\"\\"Updates a single \`Parent\` using a unique key and a patch.\\"\\"\\"
  updateParentById(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdateParentByIdInput!
  ): UpdateParentPayload

  \\"\\"\\"
  Updates a single \`Unfilterable\` using its globally unique id and a patch.
  \\"\\"\\"
  updateUnfilterable(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdateUnfilterableInput!
  ): UpdateUnfilterablePayload

  \\"\\"\\"Updates a single \`Unfilterable\` using a unique key and a patch.\\"\\"\\"
  updateUnfilterableById(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdateUnfilterableByIdInput!
  ): UpdateUnfilterablePayload
}

\\"\\"\\"An object with a globally unique \`ID\`.\\"\\"\\"
interface Node {
  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"Information about pagination in a connection.\\"\\"\\"
type PageInfo {
  \\"\\"\\"When paginating forwards, the cursor to continue.\\"\\"\\"
  endCursor: Cursor

  \\"\\"\\"When paginating forwards, are there more items?\\"\\"\\"
  hasNextPage: Boolean!

  \\"\\"\\"When paginating backwards, are there more items?\\"\\"\\"
  hasPreviousPage: Boolean!

  \\"\\"\\"When paginating backwards, the cursor to continue.\\"\\"\\"
  startCursor: Cursor
}

type Parent implements Node {
  \\"\\"\\"Reads and enables pagination through a set of \`Filterable\`.\\"\\"\\"
  filterablesByParentId(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A filter to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    filter: FilterableFilter

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Filterable\`.\\"\\"\\"
    orderBy: [FilterablesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilterablesConnection!
  id: Int!
  name: String!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"
A filter to be used against \`Parent\` object types. All fields are combined with a logical ‘and.’
\\"\\"\\"
input ParentFilter {
  \\"\\"\\"Checks for all expressions in this list.\\"\\"\\"
  and: [ParentFilter!]

  \\"\\"\\"Filter by the object’s \`id\` field.\\"\\"\\"
  id: IntFilter

  \\"\\"\\"Filter by the object’s \`name\` field.\\"\\"\\"
  name: StringFilter

  \\"\\"\\"Negates the expression.\\"\\"\\"
  not: ParentFilter

  \\"\\"\\"Checks for any expressions in this list.\\"\\"\\"
  or: [ParentFilter!]
}

\\"\\"\\"An input for mutations affecting \`Parent\`\\"\\"\\"
input ParentInput {
  id: Int
  name: String!
}

\\"\\"\\"
Represents an update to a \`Parent\`. Fields that are set will be updated.
\\"\\"\\"
input ParentPatch {
  id: Int
  name: String
}

\\"\\"\\"A connection to a list of \`Parent\` values.\\"\\"\\"
type ParentsConnection {
  \\"\\"\\"
  A list of edges which contains the \`Parent\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [ParentsEdge!]!

  \\"\\"\\"A list of \`Parent\` objects.\\"\\"\\"
  nodes: [Parent]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Parent\` you could get from the connection.\\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`Parent\` edge in the connection.\\"\\"\\"
type ParentsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Parent\` at the end of the edge.\\"\\"\\"
  node: Parent
}

\\"\\"\\"Methods to use when ordering \`Parent\`.\\"\\"\\"
enum ParentsOrderBy {
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

\\"\\"\\"The root query type which gives access points into the data universe.\\"\\"\\"
type Query implements Node {
  \\"\\"\\"Reads and enables pagination through a set of \`BackwardCompound\`.\\"\\"\\"
  allBackwardCompounds(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A filter to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    filter: BackwardCompoundFilter

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`BackwardCompound\`.\\"\\"\\"
    orderBy: [BackwardCompoundsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BackwardCompoundsConnection

  \\"\\"\\"Reads and enables pagination through a set of \`Backward\`.\\"\\"\\"
  allBackwards(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A filter to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    filter: BackwardFilter

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Backward\`.\\"\\"\\"
    orderBy: [BackwardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BackwardsConnection

  \\"\\"\\"Reads and enables pagination through a set of \`Child\`.\\"\\"\\"
  allChildren(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A filter to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    filter: ChildFilter

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Child\`.\\"\\"\\"
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenConnection

  \\"\\"\\"Reads and enables pagination through a set of \`Filterable\`.\\"\\"\\"
  allFilterables(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A filter to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    filter: FilterableFilter

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Filterable\`.\\"\\"\\"
    orderBy: [FilterablesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilterablesConnection

  \\"\\"\\"Reads and enables pagination through a set of \`ForwardCompound\`.\\"\\"\\"
  allForwardCompounds(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A filter to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    filter: ForwardCompoundFilter

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`ForwardCompound\`.\\"\\"\\"
    orderBy: [ForwardCompoundsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ForwardCompoundsConnection

  \\"\\"\\"Reads and enables pagination through a set of \`Forward\`.\\"\\"\\"
  allForwards(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A filter to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    filter: ForwardFilter

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Forward\`.\\"\\"\\"
    orderBy: [ForwardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ForwardsConnection

  \\"\\"\\"Reads and enables pagination through a set of \`Parent\`.\\"\\"\\"
  allParents(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A filter to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    filter: ParentFilter

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Parent\`.\\"\\"\\"
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsConnection

  \\"\\"\\"Reads and enables pagination through a set of \`Unfilterable\`.\\"\\"\\"
  allUnfilterables(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Unfilterable\`.\\"\\"\\"
    orderBy: [UnfilterablesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UnfilterablesConnection

  \\"\\"\\"Reads a single \`Backward\` using its globally unique \`ID\`.\\"\\"\\"
  backward(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`Backward\`.\\"\\"\\"
    nodeId: ID!
  ): Backward
  backwardByFilterableId(filterableId: Int!): Backward
  backwardById(id: Int!): Backward

  \\"\\"\\"Reads a single \`BackwardCompound\` using its globally unique \`ID\`.\\"\\"\\"
  backwardCompound(
    \\"\\"\\"
    The globally unique \`ID\` to be used in selecting a single \`BackwardCompound\`.
    \\"\\"\\"
    nodeId: ID!
  ): BackwardCompound
  backwardCompoundByBackwardCompound1AndBackwardCompound2(backwardCompound1: Int!, backwardCompound2: Int!): BackwardCompound

  \\"\\"\\"Reads a single \`Child\` using its globally unique \`ID\`.\\"\\"\\"
  child(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`Child\`.\\"\\"\\"
    nodeId: ID!
  ): Child
  childById(id: Int!): Child

  \\"\\"\\"Reads a single \`Filterable\` using its globally unique \`ID\`.\\"\\"\\"
  filterable(
    \\"\\"\\"
    The globally unique \`ID\` to be used in selecting a single \`Filterable\`.
    \\"\\"\\"
    nodeId: ID!
  ): Filterable
  filterableByBackwardCompound1AndBackwardCompound2(backwardCompound1: Int!, backwardCompound2: Int!): Filterable
  filterableByForwardId(forwardId: Int!): Filterable
  filterableById(id: Int!): Filterable

  \\"\\"\\"Reads a single \`Forward\` using its globally unique \`ID\`.\\"\\"\\"
  forward(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`Forward\`.\\"\\"\\"
    nodeId: ID!
  ): Forward
  forwardById(id: Int!): Forward

  \\"\\"\\"Reads a single \`ForwardCompound\` using its globally unique \`ID\`.\\"\\"\\"
  forwardCompound(
    \\"\\"\\"
    The globally unique \`ID\` to be used in selecting a single \`ForwardCompound\`.
    \\"\\"\\"
    nodeId: ID!
  ): ForwardCompound
  forwardCompoundByForwardCompound1AndForwardCompound2(forwardCompound1: Int!, forwardCompound2: Int!): ForwardCompound

  \\"\\"\\"Fetches an object given its globally unique \`ID\`.\\"\\"\\"
  node(
    \\"\\"\\"The globally unique \`ID\`.\\"\\"\\"
    nodeId: ID!
  ): Node

  \\"\\"\\"
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"Reads a single \`Parent\` using its globally unique \`ID\`.\\"\\"\\"
  parent(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`Parent\`.\\"\\"\\"
    nodeId: ID!
  ): Parent
  parentById(id: Int!): Parent

  \\"\\"\\"
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  \\"\\"\\"
  query: Query!

  \\"\\"\\"Reads a single \`Unfilterable\` using its globally unique \`ID\`.\\"\\"\\"
  unfilterable(
    \\"\\"\\"
    The globally unique \`ID\` to be used in selecting a single \`Unfilterable\`.
    \\"\\"\\"
    nodeId: ID!
  ): Unfilterable
  unfilterableById(id: Int!): Unfilterable
}

\\"\\"\\"
A filter to be used against String fields. All fields are combined with a logical ‘and.’
\\"\\"\\"
input StringFilter {
  \\"\\"\\"
  Not equal to the specified value, treating null like an ordinary value.
  \\"\\"\\"
  distinctFrom: String

  \\"\\"\\"Ends with the specified string (case-sensitive).\\"\\"\\"
  endsWith: String

  \\"\\"\\"Ends with the specified string (case-insensitive).\\"\\"\\"
  endsWithInsensitive: String

  \\"\\"\\"Equal to the specified value.\\"\\"\\"
  equalTo: String

  \\"\\"\\"Greater than the specified value.\\"\\"\\"
  greaterThan: String

  \\"\\"\\"Greater than or equal to the specified value.\\"\\"\\"
  greaterThanOrEqualTo: String

  \\"\\"\\"Included in the specified list.\\"\\"\\"
  in: [String!]

  \\"\\"\\"Contains the specified string (case-sensitive).\\"\\"\\"
  includes: String

  \\"\\"\\"Contains the specified string (case-insensitive).\\"\\"\\"
  includesInsensitive: String

  \\"\\"\\"
  Is null (if \`true\` is specified) or is not null (if \`false\` is specified).
  \\"\\"\\"
  isNull: Boolean

  \\"\\"\\"Less than the specified value.\\"\\"\\"
  lessThan: String

  \\"\\"\\"Less than or equal to the specified value.\\"\\"\\"
  lessThanOrEqualTo: String

  \\"\\"\\"
  Matches the specified pattern (case-sensitive). An underscore (_) matches any
  single character; a percent sign (%) matches any sequence of zero or more characters.
  \\"\\"\\"
  like: String

  \\"\\"\\"
  Matches the specified pattern (case-insensitive). An underscore (_) matches
  any single character; a percent sign (%) matches any sequence of zero or more characters.
  \\"\\"\\"
  likeInsensitive: String

  \\"\\"\\"Equal to the specified value, treating null like an ordinary value.\\"\\"\\"
  notDistinctFrom: String

  \\"\\"\\"Does not end with the specified string (case-sensitive).\\"\\"\\"
  notEndsWith: String

  \\"\\"\\"Does not end with the specified string (case-insensitive).\\"\\"\\"
  notEndsWithInsensitive: String

  \\"\\"\\"Not equal to the specified value.\\"\\"\\"
  notEqualTo: String

  \\"\\"\\"Not included in the specified list.\\"\\"\\"
  notIn: [String!]

  \\"\\"\\"Does not contain the specified string (case-sensitive).\\"\\"\\"
  notIncludes: String

  \\"\\"\\"Does not contain the specified string (case-insensitive).\\"\\"\\"
  notIncludesInsensitive: String

  \\"\\"\\"
  Does not match the specified pattern (case-sensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  \\"\\"\\"
  notLike: String

  \\"\\"\\"
  Does not match the specified pattern (case-insensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  \\"\\"\\"
  notLikeInsensitive: String

  \\"\\"\\"
  Does not match the specified pattern using the SQL standard's definition of a regular expression.
  \\"\\"\\"
  notSimilarTo: String

  \\"\\"\\"Does not start with the specified string (case-sensitive).\\"\\"\\"
  notStartsWith: String

  \\"\\"\\"Does not start with the specified string (case-insensitive).\\"\\"\\"
  notStartsWithInsensitive: String

  \\"\\"\\"
  Matches the specified pattern using the SQL standard's definition of a regular expression.
  \\"\\"\\"
  similarTo: String

  \\"\\"\\"Starts with the specified string (case-sensitive).\\"\\"\\"
  startsWith: String

  \\"\\"\\"Starts with the specified string (case-insensitive).\\"\\"\\"
  startsWithInsensitive: String
}

type Unfilterable implements Node {
  id: Int!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
  string: String
}

\\"\\"\\"An input for mutations affecting \`Unfilterable\`\\"\\"\\"
input UnfilterableInput {
  id: Int
  string: String
}

\\"\\"\\"
Represents an update to a \`Unfilterable\`. Fields that are set will be updated.
\\"\\"\\"
input UnfilterablePatch {
  id: Int
  string: String
}

\\"\\"\\"A connection to a list of \`Unfilterable\` values.\\"\\"\\"
type UnfilterablesConnection {
  \\"\\"\\"
  A list of edges which contains the \`Unfilterable\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [UnfilterablesEdge!]!

  \\"\\"\\"A list of \`Unfilterable\` objects.\\"\\"\\"
  nodes: [Unfilterable]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Unfilterable\` you could get from the connection.\\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`Unfilterable\` edge in the connection.\\"\\"\\"
type UnfilterablesEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Unfilterable\` at the end of the edge.\\"\\"\\"
  node: Unfilterable
}

\\"\\"\\"Methods to use when ordering \`Unfilterable\`.\\"\\"\\"
enum UnfilterablesOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  STRING_ASC
  STRING_DESC
}

\\"\\"\\"All input for the \`updateBackwardByFilterableId\` mutation.\\"\\"\\"
input UpdateBackwardByFilterableIdInput {
  \\"\\"\\"
  An object where the defined keys will be set on the \`Backward\` being updated.
  \\"\\"\\"
  backwardPatch: BackwardPatch!

  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  filterableId: Int!
}

\\"\\"\\"All input for the \`updateBackwardById\` mutation.\\"\\"\\"
input UpdateBackwardByIdInput {
  \\"\\"\\"
  An object where the defined keys will be set on the \`Backward\` being updated.
  \\"\\"\\"
  backwardPatch: BackwardPatch!

  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  id: Int!
}

\\"\\"\\"
All input for the \`updateBackwardCompoundByBackwardCompound1AndBackwardCompound2\` mutation.
\\"\\"\\"
input UpdateBackwardCompoundByBackwardCompound1AndBackwardCompound2Input {
  backwardCompound1: Int!
  backwardCompound2: Int!

  \\"\\"\\"
  An object where the defined keys will be set on the \`BackwardCompound\` being updated.
  \\"\\"\\"
  backwardCompoundPatch: BackwardCompoundPatch!

  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
}

\\"\\"\\"All input for the \`updateBackwardCompound\` mutation.\\"\\"\\"
input UpdateBackwardCompoundInput {
  \\"\\"\\"
  An object where the defined keys will be set on the \`BackwardCompound\` being updated.
  \\"\\"\\"
  backwardCompoundPatch: BackwardCompoundPatch!

  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`BackwardCompound\` to be updated.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"The output of our update \`BackwardCompound\` mutation.\\"\\"\\"
type UpdateBackwardCompoundPayload {
  \\"\\"\\"The \`BackwardCompound\` that was updated by this mutation.\\"\\"\\"
  backwardCompound: BackwardCompound

  \\"\\"\\"An edge for our \`BackwardCompound\`. May be used by Relay 1.\\"\\"\\"
  backwardCompoundEdge(
    \\"\\"\\"The method to use when ordering \`BackwardCompound\`.\\"\\"\\"
    orderBy: [BackwardCompoundsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BackwardCompoundsEdge

  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  Reads a single \`Filterable\` that is related to this \`BackwardCompound\`.
  \\"\\"\\"
  filterableByBackwardCompound1AndBackwardCompound2: Filterable

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"All input for the \`updateBackward\` mutation.\\"\\"\\"
input UpdateBackwardInput {
  \\"\\"\\"
  An object where the defined keys will be set on the \`Backward\` being updated.
  \\"\\"\\"
  backwardPatch: BackwardPatch!

  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`Backward\` to be updated.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"The output of our update \`Backward\` mutation.\\"\\"\\"
type UpdateBackwardPayload {
  \\"\\"\\"The \`Backward\` that was updated by this mutation.\\"\\"\\"
  backward: Backward

  \\"\\"\\"An edge for our \`Backward\`. May be used by Relay 1.\\"\\"\\"
  backwardEdge(
    \\"\\"\\"The method to use when ordering \`Backward\`.\\"\\"\\"
    orderBy: [BackwardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BackwardsEdge

  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"Reads a single \`Filterable\` that is related to this \`Backward\`.\\"\\"\\"
  filterableByFilterableId: Filterable

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"All input for the \`updateChildById\` mutation.\\"\\"\\"
input UpdateChildByIdInput {
  \\"\\"\\"
  An object where the defined keys will be set on the \`Child\` being updated.
  \\"\\"\\"
  childPatch: ChildPatch!

  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  id: Int!
}

\\"\\"\\"All input for the \`updateChild\` mutation.\\"\\"\\"
input UpdateChildInput {
  \\"\\"\\"
  An object where the defined keys will be set on the \`Child\` being updated.
  \\"\\"\\"
  childPatch: ChildPatch!

  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`Child\` to be updated.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"The output of our update \`Child\` mutation.\\"\\"\\"
type UpdateChildPayload {
  \\"\\"\\"The \`Child\` that was updated by this mutation.\\"\\"\\"
  child: Child

  \\"\\"\\"An edge for our \`Child\`. May be used by Relay 1.\\"\\"\\"
  childEdge(
    \\"\\"\\"The method to use when ordering \`Child\`.\\"\\"\\"
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenEdge

  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"Reads a single \`Filterable\` that is related to this \`Child\`.\\"\\"\\"
  filterableByFilterableId: Filterable

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"
All input for the \`updateFilterableByBackwardCompound1AndBackwardCompound2\` mutation.
\\"\\"\\"
input UpdateFilterableByBackwardCompound1AndBackwardCompound2Input {
  backwardCompound1: Int!
  backwardCompound2: Int!

  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  An object where the defined keys will be set on the \`Filterable\` being updated.
  \\"\\"\\"
  filterablePatch: FilterablePatch!
}

\\"\\"\\"All input for the \`updateFilterableByForwardId\` mutation.\\"\\"\\"
input UpdateFilterableByForwardIdInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  An object where the defined keys will be set on the \`Filterable\` being updated.
  \\"\\"\\"
  filterablePatch: FilterablePatch!
  forwardId: Int!
}

\\"\\"\\"All input for the \`updateFilterableById\` mutation.\\"\\"\\"
input UpdateFilterableByIdInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  An object where the defined keys will be set on the \`Filterable\` being updated.
  \\"\\"\\"
  filterablePatch: FilterablePatch!
  id: Int!
}

\\"\\"\\"All input for the \`updateFilterable\` mutation.\\"\\"\\"
input UpdateFilterableInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  An object where the defined keys will be set on the \`Filterable\` being updated.
  \\"\\"\\"
  filterablePatch: FilterablePatch!

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`Filterable\` to be updated.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"The output of our update \`Filterable\` mutation.\\"\\"\\"
type UpdateFilterablePayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`Filterable\` that was updated by this mutation.\\"\\"\\"
  filterable: Filterable

  \\"\\"\\"An edge for our \`Filterable\`. May be used by Relay 1.\\"\\"\\"
  filterableEdge(
    \\"\\"\\"The method to use when ordering \`Filterable\`.\\"\\"\\"
    orderBy: [FilterablesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilterablesEdge

  \\"\\"\\"Reads a single \`Forward\` that is related to this \`Filterable\`.\\"\\"\\"
  forwardByForwardId: Forward

  \\"\\"\\"
  Reads a single \`ForwardCompound\` that is related to this \`Filterable\`.
  \\"\\"\\"
  forwardCompoundByForwardCompound1AndForwardCompound2: ForwardCompound

  \\"\\"\\"Reads a single \`Parent\` that is related to this \`Filterable\`.\\"\\"\\"
  parentByParentId: Parent

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"All input for the \`updateForwardById\` mutation.\\"\\"\\"
input UpdateForwardByIdInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  An object where the defined keys will be set on the \`Forward\` being updated.
  \\"\\"\\"
  forwardPatch: ForwardPatch!
  id: Int!
}

\\"\\"\\"
All input for the \`updateForwardCompoundByForwardCompound1AndForwardCompound2\` mutation.
\\"\\"\\"
input UpdateForwardCompoundByForwardCompound1AndForwardCompound2Input {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  forwardCompound1: Int!
  forwardCompound2: Int!

  \\"\\"\\"
  An object where the defined keys will be set on the \`ForwardCompound\` being updated.
  \\"\\"\\"
  forwardCompoundPatch: ForwardCompoundPatch!
}

\\"\\"\\"All input for the \`updateForwardCompound\` mutation.\\"\\"\\"
input UpdateForwardCompoundInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  An object where the defined keys will be set on the \`ForwardCompound\` being updated.
  \\"\\"\\"
  forwardCompoundPatch: ForwardCompoundPatch!

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`ForwardCompound\` to be updated.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"The output of our update \`ForwardCompound\` mutation.\\"\\"\\"
type UpdateForwardCompoundPayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`ForwardCompound\` that was updated by this mutation.\\"\\"\\"
  forwardCompound: ForwardCompound

  \\"\\"\\"An edge for our \`ForwardCompound\`. May be used by Relay 1.\\"\\"\\"
  forwardCompoundEdge(
    \\"\\"\\"The method to use when ordering \`ForwardCompound\`.\\"\\"\\"
    orderBy: [ForwardCompoundsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ForwardCompoundsEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"All input for the \`updateForward\` mutation.\\"\\"\\"
input UpdateForwardInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  An object where the defined keys will be set on the \`Forward\` being updated.
  \\"\\"\\"
  forwardPatch: ForwardPatch!

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`Forward\` to be updated.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"The output of our update \`Forward\` mutation.\\"\\"\\"
type UpdateForwardPayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`Forward\` that was updated by this mutation.\\"\\"\\"
  forward: Forward

  \\"\\"\\"An edge for our \`Forward\`. May be used by Relay 1.\\"\\"\\"
  forwardEdge(
    \\"\\"\\"The method to use when ordering \`Forward\`.\\"\\"\\"
    orderBy: [ForwardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ForwardsEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"All input for the \`updateParentById\` mutation.\\"\\"\\"
input UpdateParentByIdInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  id: Int!

  \\"\\"\\"
  An object where the defined keys will be set on the \`Parent\` being updated.
  \\"\\"\\"
  parentPatch: ParentPatch!
}

\\"\\"\\"All input for the \`updateParent\` mutation.\\"\\"\\"
input UpdateParentInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`Parent\` to be updated.
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"
  An object where the defined keys will be set on the \`Parent\` being updated.
  \\"\\"\\"
  parentPatch: ParentPatch!
}

\\"\\"\\"The output of our update \`Parent\` mutation.\\"\\"\\"
type UpdateParentPayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`Parent\` that was updated by this mutation.\\"\\"\\"
  parent: Parent

  \\"\\"\\"An edge for our \`Parent\`. May be used by Relay 1.\\"\\"\\"
  parentEdge(
    \\"\\"\\"The method to use when ordering \`Parent\`.\\"\\"\\"
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"All input for the \`updateUnfilterableById\` mutation.\\"\\"\\"
input UpdateUnfilterableByIdInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  id: Int!

  \\"\\"\\"
  An object where the defined keys will be set on the \`Unfilterable\` being updated.
  \\"\\"\\"
  unfilterablePatch: UnfilterablePatch!
}

\\"\\"\\"All input for the \`updateUnfilterable\` mutation.\\"\\"\\"
input UpdateUnfilterableInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`Unfilterable\` to be updated.
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"
  An object where the defined keys will be set on the \`Unfilterable\` being updated.
  \\"\\"\\"
  unfilterablePatch: UnfilterablePatch!
}

\\"\\"\\"The output of our update \`Unfilterable\` mutation.\\"\\"\\"
type UpdateUnfilterablePayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query

  \\"\\"\\"The \`Unfilterable\` that was updated by this mutation.\\"\\"\\"
  unfilterable: Unfilterable

  \\"\\"\\"An edge for our \`Unfilterable\`. May be used by Relay 1.\\"\\"\\"
  unfilterableEdge(
    \\"\\"\\"The method to use when ordering \`Unfilterable\`.\\"\\"\\"
    orderBy: [UnfilterablesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UnfilterablesEdge
}
"
`;
